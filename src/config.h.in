#ifndef WMDERLAND_CONFIG_H_
#define WMDERLAND_CONFIG_H_

#include <vector>
#include <string>
#include <fstream>
#include <unordered_map>

#include "action.h"
#include "util.h"

#define WIN_MGR_NAME "@PROJECT_NAME@"
#define VERSION "@PROJECT_VERSION@"
#define GLOG_FOUND @GLOG_FOUND@
#define CONFIG_FILE "~/.config/Wmderland/config"
#define COOKIE_FILE "~/.local/share/Wmderland/cookie"

#define UNSPECIFIED_WORKSPACE -1
#define WORKSPACE_COUNT 9

#define MIN_WINDOW_WIDTH 50
#define MIN_WINDOW_HEIGHT 50
#define DEFAULT_FLOATING_WINDOW_WIDTH 800
#define DEFAULT_FLOATING_WINDOW_HEIGHT 600

#define DEFAULT_GAP_WIDTH 15
#define DEFAULT_BORDER_WIDTH 3
#define DEFAULT_FOCUSED_COLOR 0xffffffff
#define DEFAULT_UNFOCUSED_COLOR 0xff41485f

#define VARIABLE_PREFIX "$"
#define DEFAULT_EXIT_KEY "Mod4+Shift+Escape"

// If glog is not installed on the compiling machine, then this macro will do nothing.
#if GLOG_FOUND
#include <glog/logging.h>
#define WM_INIT_LOGGING(executable_name) google::InitGoogleLogging(executable_name)
#define WM_LOG(severity, msg) LOG(severity) << msg
#else
#define WM_INIT_LOGGING(executable_name)
#define WM_LOG(severity, msg)
#endif


enum class ConfigKeyword {
  SET,
  ASSIGN,
  FLOATING,
  FULLSCREEN,
  PROHIBIT,
  BINDSYM,
  EXEC,
  UNDEFINED
};

class Config {
public:
  Config(Display* dpy, Properties* prop, const std::string& filename);
  virtual ~Config();
  void Load();

  int GetSpawnWorkspaceId(Window w) const;
  bool ShouldFloat(Window w) const;
  bool ShouldFullscreen(Window w) const;
  bool ShouldProhibit(Window w) const;
  const std::vector<Action>& GetKeybindActions(const std::string& modifier, const std::string& key) const;
  void SetKeybindActions(const std::string& modifier_and_key, const std::string& actions);

  unsigned int gap_width() const;
  unsigned int border_width() const;
  unsigned int min_window_width() const;
  unsigned int min_window_height() const;
  unsigned long focused_color() const;
  unsigned long unfocused_color() const;
  const std::unordered_map<std::string, std::vector<Action>>& keybind_rules() const;
  const std::vector<std::string>& autostart_rules() const;
  
  friend std::ifstream& operator>> (std::ifstream& ifs, Config& config);

private: 
  static ConfigKeyword StrToConfigKeyword(const std::string& s);
  static std::string ExtractWindowIdentifier(const std::string& s);
  std::vector<std::string> GeneratePossibleConfigKeys(Window w) const;
  const std::string& ReplaceSymbols(std::string& s);
  
  // WM variables
  unsigned int gap_width_;
  unsigned int border_width_;
  unsigned int min_window_width_;
  unsigned int min_window_height_;
  unsigned long focused_color_;
  unsigned long unfocused_color_;
  std::unordered_map<std::string, std::string> symtab_; // for storing user-declared identifiers.

  // Rules
  std::unordered_map<std::string, int> spawn_rules_; // spawn certain apps in certain workspaces.
  std::unordered_map<std::string, bool> float_rules_; // start certain apps in floating mode.
  std::unordered_map<std::string, bool> fullscreen_rules_; // start certain apps in fullscreen mode.
  std::unordered_map<std::string, bool> prohibit_rules_; // apps that should be prohibit from starting.
  std::unordered_map<std::string, std::vector<Action>> keybind_rules_; // keybind actions.
  std::vector<std::string> autostart_rules_; // launch certain apps when wm starts.

  Display* dpy_;
  Properties* prop_;
  const std::string filename_;
  static const char kCommentSymbol = ';';
};

#endif
